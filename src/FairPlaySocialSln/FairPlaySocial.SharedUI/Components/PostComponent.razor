@using FairPlaySocial.SharedUI.Pages;
@inherits CustomBaseComponent

@if (this.PostModel != null)
{
    <div class="@ThemeConfiguration.Chats.ChatItemSection">
        <label @onclick="@( async () => await OnPostAuthorSelectedAsync(this.PostModel))"
           class="@ThemeConfiguration.Chats.ChatSender"
           style="cursor:pointer;">
            @PostModel.OwnerApplicationUserFullName
        </label>
        <label class="@ThemeConfiguration.Labels.DefaultCss"
           style="display:inline; float:right;">
            <strong>
                @(PostModel.PostedTime.Hours > 0 ? $"{(int)PostModel.PostedTime.Hours}h" : $"{PostModel.PostedTime.Minutes}m")
            </strong>
        </label>
        <p class="@ThemeConfiguration.Chats.ChatContent">@PostModel.Text</p>
        <p class="@ThemeConfiguration.Chats.ChatTime"></p>
        @if (PostModel.Photo != null)
        {
            <img class="@ThemeConfiguration.Images.ThumbnailDefaultCss"
         src="data:@PostModel.Photo!.ImageType;base64, @Convert.ToBase64String(PostModel.Photo.ImageBytes!)" />
        }
        <div class="@ThemeConfiguration.Chats.ChatActionsBar">
            @if (PostModel.IsLiked == false)
            {
                <button class="btn"
                @onclick="@( async () => await LikePostAsync(PostModel))">
                    <i class="bi bi-hand-thumbs-up"></i>
                </button>
            }
            else
            {
                <button class="btn"
                @onclick="@( async () => await RemoveLikeFromPostAsync(PostModel))">
                    <i class="bi bi-hand-thumbs-up-fill"></i>
                </button>
            }
            (@PostModel.LikesCount)
            @if (PostModel.IsDisliked == false)
            {
                <button class="btn"
                @onclick="@( async () => await DislikePostAsync(PostModel))">
                    <i class="bi bi-hand-thumbs-down"></i>
                </button>
            }
            else
            {
                <button class="btn"
                @onclick="@( async () => await RemoveDislikeFromPostAsync(PostModel))">
                    <i class="bi bi-hand-thumbs-down-fill"></i>
                </button>
            }
            (@PostModel.DisLikesCount)
            <button class="btn"
                @onclick="@( async () => await GetPostHistoryAsync(PostModel))">
                <i class="bi bi-clock-history"></i>
            </button>
            @if (PostModel.IsOwned)
            {
                <button class="btn"
                @onclick="@( () => EditPost(PostModel))">
                    <i class="bi bi-pencil-fill"></i>
                </button>
            }
            <button class="btn"
                @onclick="@( () => ReSharePost(PostModel))">
                <i class="bi bi-fast-forward-circle-fill"></i>
            </button>
            @if (!PostModel.IsOwned)
            {
                <button class="btn"
                @onclick="@( () => AddCommentToPost(PostModel))">
                    <i class="bi bi-chat-text-fill"></i>
                </button>
            }
            else
            {
                <i class="bi bi-chat-text-fill"></i>
            }
            (@PostModel.RepliesCount)
            @if (PostModel.Tag1 is not null || PostModel.Tag2 is not null || PostModel.Tag3 is not null)
            {
                <p>
                    Tag(s):
                </p>
            }
            <ul class="nav nav-pills">
                @if (PostModel.Tag1 is not null)
                {
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page">@PostModel.Tag1</a>
                    </li>
                }
                @if (PostModel.Tag2 is not null)
                {
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page">@PostModel.Tag2</a>
                    </li>
                }
                @if (PostModel.Tag3 is not null)
                {
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page">@PostModel.Tag3</a>
                    </li>
                }
            </ul>
            @if (!String.IsNullOrWhiteSpace(PostModel.Url))
            {
                <p>Url: @PostModel.Url</p>
            }
        </div>
    </div>
}

@if (this.ShowPostAuthorModal && this.MySelectedAuthorFollowStatus != null &&
this.SelectedPostModel != null && this.MySelectedAuthorUserProfile != null)
{
    <CustomModal OkButtonText="OK" OnCloseButtonClicked="HidePostAuthorModal"
             ShowFooter="false">
        <Title>@this.SelectedPostModel!.OwnerApplicationUserFullName</Title>
        <Content>
            <p>
                Bio: @this.MySelectedAuthorUserProfile.Bio
            </p>
            <p>
                YouTubeNickname: @this.MySelectedAuthorUserProfile.YouTubeNickname
            </p>
            <p>
                FacebookNickname: @this.MySelectedAuthorUserProfile.FacebookNickname
            </p>
            <p>
                InstagramNickname: @this.MySelectedAuthorUserProfile.InstagramNickname
            </p>
            <p>
                TwitterNickname: @this.MySelectedAuthorUserProfile.TwitterNickname
            </p>
            <p>
                LinkedInNickname: @this.MySelectedAuthorUserProfile.LinkedInNickname
            </p>
            @if (!this.MySelectedAuthorFollowStatus!.IsFollowed)
            {
                <button type="button"
                @onclick="OnFollowSelectedAuthorAsync">
                    <i class="bi bi-star"></i>
                </button>
            }
            else
            {
                <button type="button"
                @onclick="OnUnFollowSelectedAuthorAsync">
                    <i class="bi bi-star-fill"></i>
                </button>
            }

        </Content>
    </CustomModal>
}
@if (this.ShowPostHistory == true)
{
    <CustomModal OkButtonText="OK" OnCloseButtonClicked="HidePostHistoryModal"
             ShowFooter="false">
        <Title>Post History</Title>
        <Content>
            @if (this.SelectedPostHistory?.Length > 0)
            {
                <ul>
                    @foreach (var singlePostHistory in this.SelectedPostHistory)
                    {
                        <li>
                            <div>
                                <strong>Text: </strong>
                                @singlePostHistory.Text
                            </div>
                            <div>
                                <strong>From: </strong>
                                @singlePostHistory.ValidFrom
                            </div>
                            <div>
                                <strong>To: </strong>
                                @singlePostHistory.ValidTo
                            </div>
                        </li>
                    }
                </ul>
            }
        </Content>
    </CustomModal>
}
@if (this.ShowPostEditModal && this.SelectedPostModel != null)
{
    <CustomModal OkButtonText="OK"
             OnCloseButtonClicked="HidePostEditModal"
             ShowFooter="false">
        <Title>Edit Post</Title>
        <Content>
            <EditPostModal OnPostUpdated="OnPostUpdated"
                       PostModel="@this.SelectedPostModel"
                       CancellationToken="@this.CancellationToken"></EditPostModal>
        </Content>
    </CustomModal>
}
@if (ShowReShareModal && this.SelectedPostModel != null)
{
    <CustomModal OkButtonText="OK"
             OnCloseButtonClicked="HidePostReShareModal"
             ShowFooter="false">
        <Title>ReShare Post</Title>
        <Content>
            <EditForm Model="@this.createSharedPostModel" OnValidSubmit="OnValidSubmitForReSharePostAsync">
                <LoadingIndicator IsLoading="@this.IsBusy"></LoadingIndicator>
                <div class="@ThemeConfiguration.Divisions.DefaultCss">
                    <ObjectGraphDataAnnotationsValidator></ObjectGraphDataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>
                </div>
                <div class="@ThemeConfiguration.Divisions.DefaultCss">
                    <AudibleLabel ItemText="Type your desired text"></AudibleLabel>
                    <InputTextArea class="@ThemeConfiguration.GenericControls.DefaultCss"
                               @bind-Value="@this.createSharedPostModel!.Text"></InputTextArea>
                    <ValidationMessage For="@( () => this.createSharedPostModel!.Text)"></ValidationMessage>
                </div>
                <div class="@ThemeConfiguration.Divisions.DefaultCss">
                    <button type="submit"
                        class="@ThemeConfiguration.Buttons.PrimaryButtonCss">
                        ReShare
                    </button>
                </div>
            </EditForm>
        </Content>
    </CustomModal>
}
@if (this.ShowPostCommentsModal && this.SelectedPostModel != null)
{
    <CustomModal OkButtonText="OK"
             OnCloseButtonClicked="HidePostCommentsModal"
             ShowFooter="false">
        <Title>Comments</Title>
        <Content>
            <EditForm Model="@this.createPostCommentModel" OnValidSubmit="OnValidSubmitForAddCommentToPostAsync">
                <LoadingIndicator IsLoading="@this.IsBusy"></LoadingIndicator>
                <div class="@ThemeConfiguration.Divisions.DefaultCss">
                    <ObjectGraphDataAnnotationsValidator></ObjectGraphDataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>
                </div>
                <div class="@ThemeConfiguration.Divisions.DefaultCss">
                    <AudibleLabel ItemText="Type your desired text"></AudibleLabel>
                    <InputTextArea class="@ThemeConfiguration.GenericControls.DefaultCss"
                               @bind-Value="@this.createPostCommentModel!.Text"></InputTextArea>
                    <ValidationMessage For="@( () => this.createPostCommentModel!.Text)"></ValidationMessage>
                </div>
                <div class="@ThemeConfiguration.Divisions.DefaultCss">
                    <button type="submit"
                        class="@ThemeConfiguration.Buttons.PrimaryButtonCss">
                        Add Comment
                    </button>
                </div>
            </EditForm>
        </Content>
    </CustomModal>
}