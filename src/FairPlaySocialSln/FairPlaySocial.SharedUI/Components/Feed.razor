@inherits FairPlaySocial.SharedUI.Pages.CustomBaseComponent

<LoadingIndicator IsLoading="@this.IsBusy"></LoadingIndicator>

@if (this.PostModels?.Count > 0)
{
    @if (this.NotificationsQueue.Count > 0)
    {
        <div class="@ThemeConfiguration.Divisions.DefaultCss">
            <AudibleLabel ItemText="@PendingNotificationsMessage"></AudibleLabel>
            <button class="@ThemeConfiguration.Buttons.PrimaryButtonCss"
            type="button" @onclick="ProcessEnqueuedNotifications">
                Refresh
            </button>
        </div>
    }
    foreach (var singlePostModel in this.PostModels)
    {
        <div class="@ThemeConfiguration.Chats.ChatItemSection">
            <label @onclick="@( async () => await OnPostAuthorSelectedAsync(singlePostModel))"
           class="@ThemeConfiguration.Chats.ChatSender"
           style="cursor:pointer;">
                @singlePostModel.OwnerApplicationUserFullName
            </label>
            <label class="@ThemeConfiguration.Labels.DefaultCss"
           style="display:inline; float:right;">
                <strong>
                    @(singlePostModel.PostedTime.Hours > 0 ? $"{(int)singlePostModel.PostedTime.Hours}h" : $"{singlePostModel.PostedTime.Minutes}m")
                </strong>
            </label>
            <p class="@ThemeConfiguration.Chats.ChatContent">@singlePostModel.Text</p>
            <p class="@ThemeConfiguration.Chats.ChatTime"></p>
            @if (singlePostModel.Photo != null)
            {
                <img class="@ThemeConfiguration.Images.ThumbnailDefaultCss"
         src="data:@singlePostModel.Photo!.ImageType;base64, @Convert.ToBase64String(singlePostModel.Photo.ImageBytes!)" />
            }
            <div class="@ThemeConfiguration.Chats.ChatActionsBar">
                @if (singlePostModel.IsLiked == false)
                {
                    <button class="btn"
                @onclick="@( async () => await LikePostAsync(singlePostModel))">
                        <i class="bi bi-hand-thumbs-up"></i>
                    </button>
                }
                else
                {
                    <button class="btn"
                @onclick="@( async () => await RemoveLikeFromPostAsync(singlePostModel))">
                        <i class="bi bi-hand-thumbs-up-fill"></i>
                    </button>
                }
                @if (singlePostModel.IsDisliked == false)
                {
                    <button class="btn"
                @onclick="@( async () => await DislikePostAsync(singlePostModel))">
                        <i class="bi bi-hand-thumbs-down"></i>
                    </button>
                }
                else
                {
                    <button class="btn"
                @onclick="@( async () => await RemoveDislikeFromPostAsync(singlePostModel))">
                        <i class="bi bi-hand-thumbs-down-fill"></i>
                    </button>
                }
                <button class="btn"
                @onclick="@( async () => await GetPostHistoryAsync(singlePostModel))">
                    <i class="bi bi-clock-history"></i>
                </button>
                @if (singlePostModel.IsOwned)
                {
                    <button class="btn"
                @onclick="@( () => EditPost(singlePostModel))">
                        <i class="bi bi-pencil-fill"></i>
                    </button>
                }
                <button class="btn"
                @onclick="@( () => ReSharePost(singlePostModel))">
                    <i class="bi bi-fast-forward-circle-fill"></i>
                </button>
                <p>@singlePostModel.LikesCount like(s)</p>
                <p>@singlePostModel.DisLikesCount dislike(s)</p>
                @if (singlePostModel.Tag1 is not null)
                {
                    <p>Tag1: @singlePostModel.Tag1</p>
                }
                @if (singlePostModel.Tag2 is not null)
                {
                    <p>Tag2: @singlePostModel.Tag2</p>
                }
                @if (singlePostModel.Tag3 is not null)
                {
                    <p>Tag3: @singlePostModel.Tag3</p>
                }
                @if (!String.IsNullOrWhiteSpace(singlePostModel.Url))
                {
                    <p>Url: @singlePostModel.Url</p>
                }
            </div>
        </div>
    }
}

@if (this.ShowPostAuthorModal && this.MySelectedAuthorFollowStatus != null &&
this.SelectedPostModel != null && this.MySelectedAuthorUserProfile != null)
{
    <CustomModal OkButtonText="OK" OnCloseButtonClicked="HidePostAuthorModal"
             ShowFooter="false">
        <Title>@this.SelectedPostModel!.OwnerApplicationUserFullName</Title>
        <Content>
            <p>
                Bio: @this.MySelectedAuthorUserProfile.Bio
            </p>
            <p>
                YouTubeNickname: @this.MySelectedAuthorUserProfile.YouTubeNickname
            </p>
            <p>
                FacebookNickname: @this.MySelectedAuthorUserProfile.FacebookNickname
            </p>
            <p>
                InstagramNickname: @this.MySelectedAuthorUserProfile.InstagramNickname
            </p>
            <p>
                TwitterNickname: @this.MySelectedAuthorUserProfile.TwitterNickname
            </p>
            <p>
                LinkedInNickname: @this.MySelectedAuthorUserProfile.LinkedInNickname
            </p>
            @if (!this.MySelectedAuthorFollowStatus!.IsFollowed)
            {
                <button type="button"
                @onclick="OnFollowSelectedAuthorAsync">
                    <i class="bi bi-star"></i>
                </button>
            }
            else
            {
                <button type="button"
                @onclick="OnUnFollowSelectedAuthorAsync">
                    <i class="bi bi-star-fill"></i>
                </button>
            }

        </Content>
    </CustomModal>
}
@if (this.ShowPostHistory == true)
{
    <CustomModal OkButtonText="OK" OnCloseButtonClicked="HidePostHistoryModal"
             ShowFooter="false">
        <Title>Post History</Title>
        <Content>
            @if (this.SelectedPostHistory?.Length > 0)
            {
                <ul>
                    @foreach (var singlePostHistory in this.SelectedPostHistory)
                    {
                        <li>
                            <div>
                                <strong>Text: </strong>
                                @singlePostHistory.Text
                            </div>
                            <div>
                                <strong>From: </strong>
                                @singlePostHistory.ValidFrom
                            </div>
                            <div>
                                <strong>To: </strong>
                                @singlePostHistory.ValidTo
                            </div>
                        </li>
                    }
                </ul>
            }
        </Content>
    </CustomModal>
}
@if (this.ShowPostEditModal && this.SelectedPostModel != null)
{
    <CustomModal OkButtonText="OK"
             OnCloseButtonClicked="HidePostEditModal"
             ShowFooter="false">
        <Title>Edit Post</Title>
        <Content>
            <EditPostModal OnPostUpdated="OnPostUpdated"
                       PostModel="@this.SelectedPostModel"
                       CancellationToken="@this.CancellationToken"></EditPostModal>
        </Content>
    </CustomModal>
}
@if (ShowReShareModal && this.SelectedPostModel != null)
{
    <CustomModal OkButtonText="OK"
             OnCloseButtonClicked="HidePostReShareModal"
             ShowFooter="false">
        <Title>ReShare Post</Title>
        <Content>
            <EditForm Model="@this.createSharedPostModel" OnValidSubmit="OnValidSubmitForReSharePostAsync">
                <LoadingIndicator IsLoading="@this.IsBusy"></LoadingIndicator>
                <div class="@ThemeConfiguration.Divisions.DefaultCss">
                    <ObjectGraphDataAnnotationsValidator></ObjectGraphDataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>
                </div>
                <div class="@ThemeConfiguration.Divisions.DefaultCss">
                    <AudibleLabel ItemText="Type your desired text"></AudibleLabel>
                    <InputTextArea class="@ThemeConfiguration.GenericControls.DefaultCss"
                               @bind-Value="@this.createSharedPostModel!.Text"></InputTextArea>
                    <ValidationMessage For="@( () => this.createSharedPostModel!.Text)"></ValidationMessage>
                </div>
                <div class="@ThemeConfiguration.Divisions.DefaultCss">
                    <button type="submit"
                        class="@ThemeConfiguration.Buttons.PrimaryButtonCss">
                        ReShare
                    </button>
                </div>
            </EditForm>
        </Content>
    </CustomModal>
}